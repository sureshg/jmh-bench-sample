<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>dev.suresh</groupId>
  <artifactId>jmh-bench-sample</artifactId>
  <version>1.1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>Sample Bench</name>
  <description>A sample repo for JMH benchmark project.</description>
  <url>${github.url}</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.build.outputTimestamp>2020-04-19T01:51:00Z</project.build.outputTimestamp>
    <github.url>https://github.com/sureshg/jmh-bench-sample</github.url>
    <github.pkg.url>https://maven.pkg.github.com/sureshg/jmh-bench-sample</github.pkg.url>

    <!-- Compiler versions -->
    <javac.target>11</javac.target>
    <maven.version>3.6</maven.version>
    <kotlin.version>1.5.0</kotlin.version>
    <kotlin.use.ir>true</kotlin.use.ir>
    <kotlin.compiler.jvmTarget>${javac.target}</kotlin.compiler.jvmTarget>

    <!-- Dependency versions -->
    <jmh.version>1.31</jmh.version>
    <jmh.generator>default</jmh.generator>
    <!-- or "asm", or "reflection" -->
    <slf4j.version>1.7.30</slf4j.version>
    <uberjar.name>benchmarks</uberjar.name>

    <!-- plugin versions -->
    <compiler.plugin.version>3.8.1</compiler.plugin.version>
    <shade.plugin.version>3.2.4</shade.plugin.version>
    <enforcer.plugin.version>3.0.0-M3</enforcer.plugin.version>
    <clean.plugin.version>3.1.0</clean.plugin.version>
    <deploy.plugin.version>3.0.0-M1</deploy.plugin.version>
    <install.plugin.version>3.0.0-M1</install.plugin.version>
    <jar.plugin.version>3.2.0</jar.plugin.version>
    <javadoc.plugin.version>3.2.0</javadoc.plugin.version>
    <resources.plugin.version>3.2.0</resources.plugin.version>
    <site.plugin.version>3.9.1</site.plugin.version>
    <source.plugin.version>3.2.1</source.plugin.version>
    <surefire.plugin.version>3.0.0-M5</surefire.plugin.version>
    <execjar.plugin.version>1.5.0</execjar.plugin.version>
    <exec.plugin.version>3.0.0</exec.plugin.version>
    <release.plugin.version>3.0.0-M4</release.plugin.version>
    <gpg.plugin.version>1.6</gpg.plugin.version>
    <google-java-format.version>1.10.0</google-java-format.version>
    <gitcommit.plugin.version>4.0.4</gitcommit.plugin.version>
    <conveofmt.plugin.version>2.10</conveofmt.plugin.version>
    <versions.plugin.version>2.7</versions.plugin.version>
    <build-helper.plugin.version>3.2.0</build-helper.plugin.version>
    <extra-enforcer-rules.plugin.version>1.3</extra-enforcer-rules.plugin.version>
  </properties>

  <licenses>
    <license>
      <name>The Apache Software License, Version 2.0</name>
      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
    </license>
  </licenses>

  <inceptionYear>2020</inceptionYear>
  <scm>
    <connection>scm:git:${github.url}.git</connection>
    <developerConnection>scm:git:${github.url}.git
    </developerConnection>
    <url>${github.url}</url>
    <tag>HEAD</tag>
  </scm>

  <issueManagement>
    <system>github</system>
    <url>${github.url}/issues</url>
  </issueManagement>

  <developers>
    <developer>
      <name>Suresh</name>
      <url>https://suresh.dev</url>
      <organization>Github</organization>
      <organizationUrl>${github.url}</organizationUrl>
    </developer>
  </developers>

  <distributionManagement>
    <repository>
      <id>github</id>
      <name>sureshg</name>
      <url>${github.pkg.url}</url>
      <uniqueVersion>true</uniqueVersion>
    </repository>
    <snapshotRepository>
      <id>github</id>
      <name>sureshg</name>
      <url>${github.pkg.url}</url>
      <uniqueVersion>false</uniqueVersion>
    </snapshotRepository>
  </distributionManagement>

  <!-- repositories>
    <repository>
      <id>sonatype-oss</id>
      <name>Sonatype OSS</name>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <id>sonatype.oss.snapshots</id>
      <name>Sonatype OSS Snapshot Repository</name>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
      <releases>
        <enabled>false</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </pluginRepository>
  </pluginRepositories -->

  <!-- Dependency management -->
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-bom</artifactId>
        <version>${kotlin.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.openjdk.jmh</groupId>
        <artifactId>jmh-core</artifactId>
        <version>${jmh.version}</version>
      </dependency>
      <dependency>
        <groupId>org.openjdk.jmh</groupId>
        <artifactId>jmh-generator-annprocess</artifactId>
        <version>${jmh.version}</version>
        <scope>provided</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <!-- Dependencies -->
  <dependencies>
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-stdlib-jdk8</artifactId>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmh</groupId>
      <artifactId>jmh-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmh</groupId>
      <artifactId>jmh-generator-annprocess</artifactId>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement>
      <plugins>
        <!-- Kotlin compiler plugin -->
        <plugin>
          <groupId>org.jetbrains.kotlin</groupId>
          <artifactId>kotlin-maven-plugin</artifactId>
          <version>${kotlin.version}</version>
        </plugin>

        <!-- Java compiler plugin -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${compiler.plugin.version}</version>
        </plugin>

        <!-- Maven shade (uber jar) plugin -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <version>${shade.plugin.version}</version>
        </plugin>

        <!-- Maven version enforcer -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>${enforcer.plugin.version}</version>
        </plugin>

        <!-- Maven exec plugin -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>exec-maven-plugin</artifactId>
          <version>${exec.plugin.version}</version>
        </plugin>

        <!-- Maven build helper plugin -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <version>${build-helper.plugin.version}</version>
        </plugin>

        <!-- Enable JUnit5 unit tests. -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${surefire.plugin.version}</version>
          <configuration>
            <redirectTestOutputToFile>false</redirectTestOutputToFile>
          </configuration>
        </plugin>

        <!-- Enable javadoc artifacts. -->
        <plugin>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>${javadoc.plugin.version}</version>
          <configuration>
            <reportOutputDirectory>${project.basedir}/docs</reportOutputDirectory>
            <destDir>docs/javadocs</destDir>
          </configuration>
          <executions>
            <execution>
              <id>attach-javadocs</id>
              <goals>
                <goal>jar</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- Generate maven site. -->
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>${site.plugin.version}</version>
        </plugin>

        <!-- Enable source artifacts. -->
        <plugin>
          <artifactId>maven-source-plugin</artifactId>
          <version>${source.plugin.version}</version>
          <executions>
            <execution>
              <id>attach-sources</id>
              <goals>
                <goal>jar-no-fork</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!--Add git Properties to manifest-->
        <plugin>
          <groupId>pl.project13.maven</groupId>
          <artifactId>git-commit-id-plugin</artifactId>
          <version>${gitcommit.plugin.version}</version>
        </plugin>

        <!-- Automatically format all Java code using the Google Java Style:
            https://google.github.io/styleguide/javaguide.html -->
        <plugin>
          <groupId>com.coveo</groupId>
          <artifactId>fmt-maven-plugin</artifactId>
          <version>${conveofmt.plugin.version}</version>
          <executions>
            <execution>
              <goals>
                <goal>format</goal>
              </goals>
              <phase>process-sources</phase>
            </execution>
          </executions>
          <dependencies>
            <dependency>
              <groupId>com.google.googlejavaformat</groupId>
              <artifactId>google-java-format</artifactId>
              <version>${google-java-format.version}</version>
            </dependency>
          </dependencies>
        </plugin>

        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>${clean.plugin.version}</version>
        </plugin>

        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>${deploy.plugin.version}</version>
        </plugin>

        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>${install.plugin.version}</version>
        </plugin>

        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>${jar.plugin.version}</version>
        </plugin>

        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>${resources.plugin.version}</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-release-plugin</artifactId>
          <version>${release.plugin.version}</version>
          <configuration>
            <localCheckout>true</localCheckout> <!-- must be true -->
          </configuration>
        </plugin>

      </plugins>
    </pluginManagement>

    <!-- Configure Plugins -->
    <plugins>

      <!-- 1. Compile Kotlin sources first. -->
      <plugin>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-maven-plugin</artifactId>
        <executions>

          <execution>
            <id>process-sources</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>compile</goal>
            </goals>
            <configuration>
              <sourceDirs>
                <sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
              </sourceDirs>
            </configuration>
          </execution>

          <execution>
            <id>process-test-sources</id>
            <phase>test-compile</phase>
            <goals>
              <goal>test-compile</goal>
            </goals>
          </execution>
        </executions>

        <configuration>
          <args>
            <arg>-Xuse-ir=${kotlin.use.ir}</arg>
            <!-- Enable strict mode for JSR-305 annotations -->
            <arg>-Xjsr305=strict</arg>
          </args>
        </configuration>
      </plugin>

      <!-- 2. Invoke JMH generators to produce benchmark code -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <execution>
            <phase>process-sources</phase>
            <goals>
              <goal>java</goal>
            </goals>
            <configuration>
              <includePluginDependencies>true</includePluginDependencies>
              <mainClass>org.openjdk.jmh.generators.bytecode.JmhBytecodeGenerator</mainClass>
              <arguments>
                <argument>${project.basedir}/target/classes/</argument>
                <argument>${project.basedir}/target/generated-sources/jmh/</argument>
                <argument>${project.basedir}/target/classes/</argument>
                <argument>${jmh.generator}</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>

        <dependencies>
          <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-generator-bytecode</artifactId>
            <version>${jmh.version}</version>
          </dependency>
        </dependencies>
      </plugin>

      <!-- 3. Add JMH generated code to the compile session. -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>add-source</id>
            <phase>process-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${project.basedir}/target/generated-sources/jmh</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- 4. Compile JMH generated code -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <compilerVersion>${javac.target}</compilerVersion>
          <source>${javac.target}</source>
          <release>${javac.target}</release>
        </configuration>
      </plugin>

      <!--  5. Package all the dependencies into the JAR -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <finalName>${uberjar.name}</finalName>
              <transformers>
                <transformer
                  implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>org.openjdk.jmh.Main</mainClass>
                </transformer>
                <transformer
                  implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
              </transformers>
              <filters>
                <filter>
                  <!--
                      Shading signed JARs will fail without this.
                      http://stackoverflow.com/questions/999489/invalid-signature-file-when-attempting-to-run-a-jar
                  -->
                  <artifact>*:*</artifact>
                  <excludes>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
              </filters>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Enforces Maven version -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>enforce-maven</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <dependencyConvergence/>
                <requireMavenVersion>
                  <message>Maven ${maven.version}.0 or higher required.</message>
                  <version>[${maven.version},)</version>
                </requireMavenVersion>
                <requireJavaVersion>
                  <version>${javac.target}</version>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>extra-enforcer-rules</artifactId>
            <version>${extra-enforcer-rules.plugin.version}</version>
          </dependency>
        </dependencies>
      </plugin>

    </plugins>
  </build>
</project>